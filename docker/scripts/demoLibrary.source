#!/bin/bash
#
# Copyright (C) 2017 Brady Miller <brady.g.miller@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Bash library for openemr demo farm
#

# This is the wrapper to start the demo, so only need to modify the specifics in 1 place
# rather than 2. This sets up the pieces for running the startDemo() function
# 1st (and only) parameter is the demo name (one, two, three, etc.)
startDemoWrapper() {
    if [ "$1" == "seven" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php/7.0/apache2" "17-04" "17.04" "/var/www/html"
    elif [ "$1" == "eight" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php/7.1/apache2" "17-10" "17.10" "/var/www/html"
    elif [ "$1" == "nine" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php7" "3-5" "3.5" "/var/www/localhost/htdocs"
    elif [ "$1" == "ten" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php7" "3-6" "3.6" "/var/www/localhost/htdocs"
    else
        startDemo "$1" "mysql-openemr" "/etc/php/7.0/apache2" "16-04" "16.04" "/var/www/html"
    fi
}

# Will stop and clear an openemr demo
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd paremeter is the mysql root password
stopDemo () {
    local MYSQLIP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-openemr`

    # Stop the docker
    echo "Stop ${1}-openemr docker"
    docker stop ${1}-openemr
    docker rm ${1}-openemr

    # Remove the database stuff
    echo "Clear ${1}-openemr database"
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}wordpress
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}wordpress';FLUSH PRIVILEGES;"
}

# Will start an openemr demo
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd paremeter is the mysql name (mysql-openemr etc.)
# 3rd parameter is the path to php.ini version (ie. /etc/php/7.0/apache2 )
# 4th parameter is ubuntu/alpine version with dash (16-04, 17-04, 17-10, etc.)
# 5th parameter is ubuntu/alpine version with period (16.04, 17.04, 17.10, etc.)
# 6th parameter is the path to htdocs (ie. /var/www/html )
startDemo () {
    # Start docker
    echo "Start ${1}-openemr docker"
    docker run --detach --name ${1}-openemr \
                        --env "DOCKERDEMO=${1}" \
                        --env "DOCKERMYSQLHOST=${2}" \
                        -v ~/demo_farm_openemr/docker/php/${4}/php.ini:${3}/php.ini:ro \
                        -v ~/wkhtmltopdf-openemr:${6}/openemr/vendor/openemr/wkhtmltopdf-openemr:ro \
                        -v ~/demo_farm_openemr/docker/stunnel/stunnel.conf:/etc/stunnel/stunnel.conf:ro \
                        -v ~/demo_farm_openemr/docker/postfix/main.cf:/etc/postfix/main.cf:ro \
                        -v ~/cred/sasl_passwd:/etc/postfix/sasl_passwd:ro \
                        -v ~/cred/sasl_passwd.db:/etc/postfix/sasl_passwd.db:ro \
                        --net mynet \
                        bradymiller/pre-openemr:${5}
}

startMysql () {
    docker run --detach --name mysql-openemr \
                        --env "MYSQL_ROOT_PASSWORD=hey" \
                        --net mynet \
                        --ulimit nofile=65536:65536 \
                        mysql \
                        --max-connections=350
}

restartMysql () {
    docker stop mysql-openemr
    docker rm mysql-openemr
    startMysql
}

startPhp () {
    docker run --detach --name php-serve \
                        -v ~/html:/usr/share/nginx/html:ro \
                        -v ~/cred/openemr-demo-server.pem:/home/ssh/openemr-demo-server.pem:ro \
                        --net mynet \
                        php:7.1-fpm-alpine
}

restartPhp () {
    docker stop php-serve
    docker rm php-serve
    startPhp
}

startNginx () {
    docker run --detach --name reverse-proxy \
                        -p 80:80 \
                        -p 443:443 \
                        -v ~/demo_farm_openemr/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
                        -v ~/cred/.htpasswd:/etc/nginx/.htpasswd:ro \
                        -v ~/html:/usr/share/nginx/html:ro \
                        -v certs:/etc/letsencrypt \
                        -v certs-data:/data/letsencrypt \
                        --net mynet \
                        nginx
}

restartNginx () {
    docker stop reverse-proxy
    docker rm reverse-proxy
    startNginx
}

startPhpmyadmin () {
    docker run --detach --name phpmyadmin-openemr \
                        --env "PMA_HOST=mysql-openemr" \
                        --net mynet \
                         phpmyadmin/phpmyadmin
}

restartPhpmyadmin () {
    docker stop phpmyadmin-openemr
    docker rm phpmyadmin-openemr
    startPhpmyadmin
}

primeLetsencrypt () {
    docker run -it --rm \
               -v certs:/etc/letsencrypt \
               -v certs-data:/data/letsencrypt \
               deliverous/certbot \
               certonly \
               --webroot --webroot-path=/data/letsencrypt \
               -d openemr.io \
               -d www.openemr.io \
               -d translations.openemr.io \
               -d phpmyadmin.openemr.io \
               -d demo.openemr.io \
               -d one.openemr.io \
               -d two.openemr.io \
               -d three.openemr.io \
               -d four.openemr.io \
               -d five.openemr.io \
               -d six.openemr.io \
               -d seven.openemr.io \
               -d eight.openemr.io \
               -d nine.openemr.io \
               -d ten.openemr.io
}

renewLetsencrypt () {
    docker run -t --rm \
               -v certs:/etc/letsencrypt \
               -v certs-data:/data/letsencrypt \
               -v /var/log/letsencrypt:/var/log/letsencrypt \
               deliverous/certbot \
               renew \
               --webroot --webroot-path=/data/letsencrypt
}

